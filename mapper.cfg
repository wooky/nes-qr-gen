SYMBOLS {

	__STACKSIZE__: type = weak, value = $0500; # 5 pages stack

	NES_MAPPER: type = weak, value = 1; 			# mapper number
	NES_PRG_BANKS: type = weak, value = 8; 			# number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS: type = weak, value = 0; 			# number of 8K CHR banks
	NES_MIRRORING: type = weak, value = 1; 			# 0 horizontal, 1 vertical, 8 four screen
    NES_PRG_RAM_SHIFT_COUNT: type = weak, value = 7; # 64 << 7 = 8192 bytes
    NES_CHR_RAM_SHIFT_COUNT: type = weak, value = 7; # 64 << 7 = 8192 bytes
    NES_FAMILY_BASIC_KEYBOARD: type = weak, value = $23;
}

MEMORY {

    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
    PRG01:      start = $8000, size = $8000, file = %O, fill = yes, define = yes;
    PRG23:      start = $8000, size = $8000, file = %O, fill = yes, define = yes;
    PRG4:       start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    PRG5:       start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    PRG6:       start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    PRG: 		start = $C000, size = $3ffa, file = %O ,fill = yes, define = yes;
    VECTORS:		start = $fffa, size = $0006, file = %O, fill = yes;
    RAM:		start = $0300, size = $0500, define = yes;
    XRAM:       start = $6000, size = $2000, define = yes;

	  # Use this definition instead if you going to use extra 8K RAM
	  # RAM: start = $6000, size = $2000, define = yes;
}

SEGMENTS {

    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    RSMT0:    load = PRG01,          type = ro,  define = yes;
    RSMT1:    load = PRG23,          type = ro,  define = yes;
    QRCODEGEN: load = PRG4,          type = ro,  define = yes;
    WRAM:     load = XRAM,           type = rw,  define = yes;
}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}